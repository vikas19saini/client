{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Projects\\\\client\\\\src\\\\pages\\\\helpers.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nexport function getProductPrice(product) {\n  _s();\n\n  var config = useSelector(function (state) {\n    return state;\n  });\n\n  if (product.salePrice !== 0) {\n    return parseFloat((product.salePrice * config.currency.value).toFixed(2));\n  }\n\n  return parseFloat((product.ragularPrice * config.currency.value).toFixed(2));\n}\n\n_s(getProductPrice, \"SmZQUI/h7PWuLwz51BGTEPY/o9g=\", false, function () {\n  return [useSelector];\n});\n\nexport function formatPrice(price) {\n  _s2();\n\n  var storeConfig = useSelector(function (state) {\n    return state.config;\n  });\n  price = parseFloat((price * storeConfig.currency.value).toFixed(2));\n  return new Intl.NumberFormat('en-IN', {\n    style: \"currency\",\n    currency: storeConfig.currency.code\n  }).format(price);\n}\n\n_s2(formatPrice, \"HR2dM6xVgn1cI+d3q51/tKd6Txw=\", false, function () {\n  return [useSelector];\n});\n\nexport function GetPriceHtml(props) {\n  if (props.product.salePrice === 0) {\n    return formatPrice(props.product.ragularPrice);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [formatPrice(props.product.salePrice) + \"/Mtr \", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      children: /*#__PURE__*/_jsxDEV(\"del\", {\n        children: [formatPrice(props.product.ragularPrice), \"/Mtr\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 68\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 62\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n_c = GetPriceHtml;\nexport function addToCart(product) {}\n\nvar _c;\n\n$RefreshReg$(_c, \"GetPriceHtml\");","map":{"version":3,"sources":["D:/Projects/client/src/pages/helpers.js"],"names":["Fragment","useSelector","getProductPrice","product","config","state","salePrice","parseFloat","currency","value","toFixed","ragularPrice","formatPrice","price","storeConfig","Intl","NumberFormat","style","code","format","GetPriceHtml","props","addToCart"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAAA;;AACrC,MAAMC,MAAM,GAAGH,WAAW,CAAC,UAAAI,KAAK;AAAA,WAAIA,KAAJ;AAAA,GAAN,CAA1B;;AAEA,MAAIF,OAAO,CAACG,SAAR,KAAsB,CAA1B,EAA6B;AACzB,WAAOC,UAAU,CAAC,CAACJ,OAAO,CAACG,SAAR,GAAoBF,MAAM,CAACI,QAAP,CAAgBC,KAArC,EAA4CC,OAA5C,CAAoD,CAApD,CAAD,CAAjB;AACH;;AAED,SAAOH,UAAU,CAAC,CAACJ,OAAO,CAACQ,YAAR,GAAuBP,MAAM,CAACI,QAAP,CAAgBC,KAAxC,EAA+CC,OAA/C,CAAuD,CAAvD,CAAD,CAAjB;AACH;;GAReR,e;UACGD,W;;;AASnB,OAAO,SAASW,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAC/B,MAAMC,WAAW,GAAGb,WAAW,CAAC,UAAAI,KAAK;AAAA,WAAIA,KAAK,CAACD,MAAV;AAAA,GAAN,CAA/B;AACAS,EAAAA,KAAK,GAAGN,UAAU,CAAC,CAACM,KAAK,GAAGC,WAAW,CAACN,QAAZ,CAAqBC,KAA9B,EAAqCC,OAArC,CAA6C,CAA7C,CAAD,CAAlB;AACA,SAAO,IAAIK,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAAEC,IAAAA,KAAK,EAAE,UAAT;AAAqBT,IAAAA,QAAQ,EAAEM,WAAW,CAACN,QAAZ,CAAqBU;AAApD,GAA/B,EAA2FC,MAA3F,CAAkGN,KAAlG,CAAP;AACH;;IAJeD,W;UACQX,W;;;AAKxB,OAAO,SAASmB,YAAT,CAAsBC,KAAtB,EAA6B;AAChC,MAAIA,KAAK,CAAClB,OAAN,CAAcG,SAAd,KAA4B,CAAhC,EAAmC;AAC/B,WAAQM,WAAW,CAACS,KAAK,CAAClB,OAAN,CAAcQ,YAAf,CAAnB;AACH;;AACD,sBACI,QAAC,QAAD;AAAA,eACKC,WAAW,CAACS,KAAK,CAAClB,OAAN,CAAcG,SAAf,CAAX,GAAuC,OAD5C,oBACqD;AAAA,6BAAM;AAAA,mBAAMM,WAAW,CAACS,KAAK,CAAClB,OAAN,CAAcQ,YAAf,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,YADrD;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KATeS,Y;AAWhB,OAAO,SAASE,SAAT,CAAmBnB,OAAnB,EAA2B,CAEjC","sourcesContent":["import { Fragment } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nexport function getProductPrice(product) {\r\n    const config = useSelector(state => state);\r\n\r\n    if (product.salePrice !== 0) {\r\n        return parseFloat((product.salePrice * config.currency.value).toFixed(2))\r\n    }\r\n\r\n    return parseFloat((product.ragularPrice * config.currency.value).toFixed(2))\r\n}\r\n\r\nexport function formatPrice(price) {\r\n    const storeConfig = useSelector(state => state.config);\r\n    price = parseFloat((price * storeConfig.currency.value).toFixed(2))\r\n    return new Intl.NumberFormat('en-IN', { style: \"currency\", currency: storeConfig.currency.code }).format(price)\r\n}\r\n\r\nexport function GetPriceHtml(props) {\r\n    if (props.product.salePrice === 0) {\r\n        return (formatPrice(props.product.ragularPrice))\r\n    }\r\n    return (\r\n        <Fragment>\r\n            {formatPrice(props.product.salePrice) + \"/Mtr \"} <span><del>{formatPrice(props.product.ragularPrice)}/Mtr</del></span>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport function addToCart(product){\r\n\r\n}"]},"metadata":{},"sourceType":"module"}