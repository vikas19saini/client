{"ast":null,"code":"import _regeneratorRuntime from \"D:/Projects/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Projects/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:/Projects/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useStore } from \"react-redux\";\nexport function getProductPrice(product) {\n  _s();\n\n  var _useStore$getState = useStore().getState(),\n      _useStore$getState2 = _slicedToArray(_useStore$getState, 1),\n      config = _useStore$getState2[0];\n\n  if (product.salePrice !== 0) {\n    return parseFloat((product.salePrice * config.currency.value).toFixed(2));\n  }\n\n  return parseFloat((product.ragularPrice * config.currency.value).toFixed(2));\n}\n\n_s(getProductPrice, \"tRpAAnpj2/w/nb/IphdrVKKBg0Y=\", false, function () {\n  return [useStore];\n});\n\nexport function formatPrice(_x) {\n  return _formatPrice.apply(this, arguments);\n}\n\nfunction _formatPrice() {\n  var _s2 = $RefreshSig$();\n\n  _formatPrice = _asyncToGenerator(_s2( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(price) {\n    var _useStore$getState3, _useStore$getState4, config;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _s2();\n\n            _useStore$getState3 = useStore().getState(), _useStore$getState4 = _slicedToArray(_useStore$getState3, 1), config = _useStore$getState4[0];\n            price = parseFloat((price * config.currency.value).toFixed(2));\n            return _context.abrupt(\"return\", new Intl.NumberFormat('en-IN', {\n              style: \"currency\",\n              currency: config.currency.code\n            }).format(price));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }), \"tRpAAnpj2/w/nb/IphdrVKKBg0Y=\", false, function () {\n    return [useStore];\n  }));\n  return _formatPrice.apply(this, arguments);\n}\n\nexport function getPriceHtml(product) {\n  if (product.salePrice === 0) {\n    return formatPrice(product.ragularPrice);\n  }\n\n  return \"\".concat(formatPrice(product.salePrice), \" <del>\").concat(formatPrice(product.ragularPrice), \"</del>\");\n}","map":{"version":3,"sources":["D:/Projects/client/src/pages/helpers.js"],"names":["useStore","getProductPrice","product","getState","config","salePrice","parseFloat","currency","value","toFixed","ragularPrice","formatPrice","price","Intl","NumberFormat","style","code","format","getPriceHtml"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAAA;;AAAA,2BACpBF,QAAQ,GAAGG,QAAX,EADoB;AAAA;AAAA,MAC9BC,MAD8B;;AAGrC,MAAIF,OAAO,CAACG,SAAR,KAAsB,CAA1B,EAA6B;AACzB,WAAOC,UAAU,CAAC,CAACJ,OAAO,CAACG,SAAR,GAAoBD,MAAM,CAACG,QAAP,CAAgBC,KAArC,EAA4CC,OAA5C,CAAoD,CAApD,CAAD,CAAjB;AACH;;AAED,SAAOH,UAAU,CAAC,CAACJ,OAAO,CAACQ,YAAR,GAAuBN,MAAM,CAACG,QAAP,CAAgBC,KAAxC,EAA+CC,OAA/C,CAAuD,CAAvD,CAAD,CAAjB;AACH;;GAReR,e;UACKD,Q;;;AASrB,gBAAsBW,WAAtB;AAAA;AAAA;;;;;8EAAO,iBAA2BC,KAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kCACcZ,QAAQ,GAAGG,QAAX,EADd,gEACIC,MADJ;AAEHQ,YAAAA,KAAK,GAAGN,UAAU,CAAC,CAACM,KAAK,GAAGR,MAAM,CAACG,QAAP,CAAgBC,KAAzB,EAAgCC,OAAhC,CAAwC,CAAxC,CAAD,CAAlB;AAFG,6CAGI,IAAII,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAAEC,cAAAA,KAAK,EAAE,UAAT;AAAqBR,cAAAA,QAAQ,EAAEH,MAAM,CAACG,QAAP,CAAgBS;AAA/C,aAA/B,EAAsFC,MAAtF,CAA6FL,KAA7F,CAHJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;YACcZ,Q;;;;;AAKrB,OAAO,SAASkB,YAAT,CAAsBhB,OAAtB,EAA+B;AAClC,MAAIA,OAAO,CAACG,SAAR,KAAsB,CAA1B,EAA6B;AACzB,WAAOM,WAAW,CAACT,OAAO,CAACQ,YAAT,CAAlB;AACH;;AAED,mBAAUC,WAAW,CAACT,OAAO,CAACG,SAAT,CAArB,mBAAiDM,WAAW,CAACT,OAAO,CAACQ,YAAT,CAA5D;AACH","sourcesContent":["import { useStore } from \"react-redux\";\r\n\r\nexport function getProductPrice(product) {\r\n    const [config] = useStore().getState();\r\n\r\n    if (product.salePrice !== 0) {\r\n        return parseFloat((product.salePrice * config.currency.value).toFixed(2))\r\n    }\r\n\r\n    return parseFloat((product.ragularPrice * config.currency.value).toFixed(2))\r\n}\r\n\r\nexport async function formatPrice(price) {\r\n    const [config] = useStore().getState();\r\n    price = parseFloat((price * config.currency.value).toFixed(2))\r\n    return new Intl.NumberFormat('en-IN', { style: \"currency\", currency: config.currency.code }).format(price)\r\n}\r\n\r\nexport function getPriceHtml(product) {\r\n    if (product.salePrice === 0) {\r\n        return formatPrice(product.ragularPrice)\r\n    }\r\n\r\n    return `${formatPrice(product.salePrice)} <del>${formatPrice(product.ragularPrice)}</del>`\r\n}"]},"metadata":{},"sourceType":"module"}