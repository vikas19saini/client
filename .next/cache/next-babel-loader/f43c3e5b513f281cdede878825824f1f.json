{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers, createStore } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper'; // create your reducer\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      let nextState = _objectSpread(_objectSpread({}, state), {\n        currency: action.payload\n      });\n\n      return nextState;\n\n    case 'SET_CURRENCY':\n      let nextStateup = _objectSpread(_objectSpread({}, state), {\n        currency: action.payload\n      });\n\n      console.log(nextStateup);\n      return nextStateup;\n\n    default:\n      return state;\n  }\n}; // create a makeStore function\n\n\nconst makeStore = context => createStore(combineReducers({\n  config: reducer\n})); // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["D:/Projects/client/src/redux/store.js"],"names":["combineReducers","createStore","createWrapper","HYDRATE","reducer","state","action","type","nextState","currency","payload","nextStateup","console","log","makeStore","context","config","wrapper"],"mappings":";;;;;;AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,OAAL;AACI,UAAIK,SAAS,mCAAQH,KAAR,GAAkB;AAAEI,QAAAA,QAAQ,EAAEH,MAAM,CAACI;AAAnB,OAAlB,CAAb;;AACA,aAAOF,SAAP;;AACJ,SAAK,cAAL;AACI,UAAIG,WAAW,mCAAQN,KAAR,GAAkB;AAAEI,QAAAA,QAAQ,EAAEH,MAAM,CAACI;AAAnB,OAAlB,CAAf;;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACA,aAAOA,WAAP;;AACJ;AACI,aAAON,KAAP;AATR;AAWH,CAZD,C,CAcA;;;AACA,MAAMS,SAAS,GAAGC,OAAO,IAAId,WAAW,CAACD,eAAe,CAAC;AACrDgB,EAAAA,MAAM,EAAEZ;AAD6C,CAAD,CAAhB,CAAxC,C,CAIA;;;AACA,OAAO,MAAMa,OAAO,GAAGf,aAAa,CAACY,SAAD,CAA7B","sourcesContent":["import { combineReducers, createStore } from 'redux';\r\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\r\n\r\n// create your reducer\r\nconst reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            let nextState = { ...state, ...{ currency: action.payload } }\r\n            return nextState\r\n        case 'SET_CURRENCY':\r\n            let nextStateup = { ...state, ...{ currency: action.payload } }\r\n            console.log(nextStateup);\r\n            return nextStateup\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// create a makeStore function\r\nconst makeStore = context => createStore(combineReducers({\r\n    config: reducer\r\n}));\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper(makeStore);"]},"metadata":{},"sourceType":"module"}