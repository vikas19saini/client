{"ast":null,"code":"import _defineProperty from \"D:/Projects/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers, createStore } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\nimport { connect } from 'react-redux'; // create your reducer\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    code: \"THB\",\n    id: 4,\n    status: 1,\n    title: \"ABC\",\n    value: 0.41\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      var nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n      if (state.count) nextState.count = state.count; // preserve count value on client side navigation\n\n      return nextState;\n\n    case 'SET_CURRENCY':\n      var nextStateup = _objectSpread(_objectSpread({}, state), {\n        currency: action.payload\n      });\n\n      return nextStateup;\n\n    default:\n      return state;\n  }\n}; // create a makeStore function\n\n\nvar makeStore = function makeStore(context) {\n  return createStore(reducer);\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: false\n});","map":{"version":3,"sources":["D:/Projects/client/src/redux/store.js"],"names":["combineReducers","createStore","createWrapper","HYDRATE","connect","reducer","state","code","id","status","title","value","action","type","nextState","payload","count","nextStateup","currency","makeStore","context","wrapper","debug"],"mappings":";;;;;;AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAMF;AAAA,MANGC,KAMH,uEANW;AACrBC,IAAAA,IAAI,EAAE,KADe;AAErBC,IAAAA,EAAE,EAAE,CAFiB;AAGrBC,IAAAA,MAAM,EAAE,CAHa;AAIrBC,IAAAA,KAAK,EAAE,KAJc;AAKrBC,IAAAA,KAAK,EAAE;AALc,GAMX;AAAA,MAAXC,MAAW;;AACV,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,OAAL;AACI,UAAIW,SAAS,mCACNR,KADM,GAENM,MAAM,CAACG,OAFD,CAAb;;AAIA,UAAIT,KAAK,CAACU,KAAV,EAAiBF,SAAS,CAACE,KAAV,GAAkBV,KAAK,CAACU,KAAxB,CALrB,CAKmD;;AAC/C,aAAOF,SAAP;;AACJ,SAAK,cAAL;AACI,UAAIG,WAAW,mCAAQX,KAAR,GAAkB;AAAEY,QAAAA,QAAQ,EAAEN,MAAM,CAACG;AAAnB,OAAlB,CAAf;;AACA,aAAOE,WAAP;;AACJ;AACI,aAAOX,KAAP;AAZR;AAcH,CArBD,C,CAyBA;;;AACA,IAAMa,SAAS,GAAG,SAAZA,SAAY,CAAAC,OAAO;AAAA,SAAInB,WAAW,CAACI,OAAD,CAAf;AAAA,CAAzB,C,CAEA;;;AACA,OAAO,IAAMgB,OAAO,GAAGnB,aAAa,CAACiB,SAAD,EAAY;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { combineReducers, createStore } from 'redux';\r\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\r\nimport { connect } from 'react-redux';\r\n\r\n// create your reducer\r\nconst reducer = (state = {\r\n    code: \"THB\",\r\n    id: 4,\r\n    status: 1,\r\n    title: \"ABC\",\r\n    value: 0.41\r\n}, action) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            let nextState = {\r\n                ...state, // use previous state\r\n                ...action.payload, // apply delta from hydration\r\n            }\r\n            if (state.count) nextState.count = state.count // preserve count value on client side navigation\r\n            return nextState\r\n        case 'SET_CURRENCY':\r\n            let nextStateup = { ...state, ...{ currency: action.payload } }\r\n            return nextStateup\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\n// create a makeStore function\r\nconst makeStore = context => createStore(reducer);\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper(makeStore, { debug: false });"]},"metadata":{},"sourceType":"module"}