{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\nimport thunkMiddleware from \"redux-thunk\";\nvar initState = {\n  currency: {\n    code: \"INR\",\n    id: 4,\n    status: 1,\n    title: \"INR\",\n    value: 1\n  }\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      var nextState = _objectSpread({}, state);\n\n      return nextState;\n\n    case 'SET_CURRENCY':\n      var nextStateup = _objectSpread(_objectSpread({}, state), {\n        currency: action.payload\n      });\n\n      return nextStateup;\n\n    case 'ADD_TO_CART':\n      var cartAfterAdd = _objectSpread(_objectSpread({}, state), {\n        cart: action.payload\n      });\n\n      return cartAfterAdd;\n\n    case 'REMOVE_FROM_CART':\n      var cartAfterRemove = _objectSpread(_objectSpread({}, state), {\n        cart: action.payload\n      });\n\n      return cartAfterRemove;\n\n    case 'USER_LOGIN':\n      var afterLogin = _objectSpread(_objectSpread({}, state), {\n        auth: action.payload\n      });\n\n      return afterLogin;\n\n    /* case 'SYNC_CART':\r\n        let cartAfterAdd = { ...state, ...{ cart: action.payload } }\r\n        return cartAfterAdd */\n\n    case 'SIGN_OUT':\n      var afterLogout = _objectSpread({}, state);\n\n      delete afterLogout.auth;\n      return afterLogout;\n\n    default:\n      return state;\n  }\n};\n\nvar combinedReducer = combineReducers({\n  config: reducer\n}); // BINDING MIDDLEWARE\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    var _require = require(\"redux-devtools-extension\"),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nvar makeStore = function makeStore(_ref) {\n  var isServer = _ref.isServer;\n\n  if (isServer) {\n    //If it's on server side, create a store\n    return createStore(combinedReducer, bindMiddleware([thunkMiddleware]));\n  } else {\n    //If it's on client side, create a store which will persist\n    var _require2 = require(\"redux-persist\"),\n        persistStore = _require2.persistStore,\n        persistReducer = _require2.persistReducer;\n\n    var storage = require(\"redux-persist/lib/storage\")[\"default\"];\n\n    var persistConfig = {\n      key: \"gandhiStore\",\n      whitelist: [\"config\"],\n      // only counter will be persisted, add other reducers if needed\n      storage: storage // if needed, use a safer storage\n\n    };\n    var persistedReducer = persistReducer(persistConfig, combinedReducer); // Create a new reducer with our existing reducer\n\n    var store = createStore(persistedReducer, bindMiddleware([thunkMiddleware])); // Creating the store again\n\n    store.__persistor = persistStore(store); // This creates a persistor object & push that persisted object to .__persistor, so that we can avail the persistability feature\n\n    return store;\n  }\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["D:/Projects/client/src/redux/store.js"],"names":["combineReducers","createStore","applyMiddleware","createWrapper","HYDRATE","thunkMiddleware","initState","currency","code","id","status","title","value","reducer","state","action","type","nextState","nextStateup","payload","cartAfterAdd","cart","cartAfterRemove","afterLogin","auth","afterLogout","combinedReducer","config","bindMiddleware","middleware","require","composeWithDevTools","makeStore","isServer","persistStore","persistReducer","storage","persistConfig","key","whitelist","persistedReducer","store","__persistor","wrapper"],"mappings":"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","sourcesContent":["import { combineReducers, createStore, applyMiddleware } from 'redux';\r\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet initState = {\r\n    currency: {\r\n        code: \"INR\",\r\n        id: 4,\r\n        status: 1,\r\n        title: \"INR\",\r\n        value: 1\r\n    }\r\n}\r\n\r\nconst reducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            let nextState = { ...state }\r\n            return nextState\r\n        case 'SET_CURRENCY':\r\n            let nextStateup = { ...state, ...{ currency: action.payload } }\r\n            return nextStateup;\r\n        case 'ADD_TO_CART':\r\n            let cartAfterAdd = { ...state, ...{ cart: action.payload } }\r\n            return cartAfterAdd;\r\n        case 'REMOVE_FROM_CART':\r\n            let cartAfterRemove = { ...state, ...{ cart: action.payload } }\r\n            return cartAfterRemove\r\n        case 'USER_LOGIN':\r\n            let afterLogin = { ...state, ...{ auth: action.payload } }\r\n            return afterLogin;\r\n        /* case 'SYNC_CART':\r\n            let cartAfterAdd = { ...state, ...{ cart: action.payload } }\r\n            return cartAfterAdd */\r\n        case 'SIGN_OUT':\r\n            let afterLogout = { ...state }\r\n            delete afterLogout.auth\r\n            return afterLogout;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst combinedReducer = combineReducers({\r\n    config: reducer\r\n})\r\n\r\n\r\n// BINDING MIDDLEWARE\r\nconst bindMiddleware = (middleware) => {\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        const { composeWithDevTools } = require(\"redux-devtools-extension\");\r\n        return composeWithDevTools(applyMiddleware(...middleware));\r\n    }\r\n    return applyMiddleware(...middleware);\r\n};\r\n\r\nconst makeStore = ({ isServer }) => {\r\n    if (isServer) {\r\n        //If it's on server side, create a store\r\n        return createStore(combinedReducer, bindMiddleware([thunkMiddleware]));\r\n    } else {\r\n        //If it's on client side, create a store which will persist\r\n        const { persistStore, persistReducer } = require(\"redux-persist\");\r\n        const storage = require(\"redux-persist/lib/storage\").default;\r\n\r\n        const persistConfig = {\r\n            key: \"gandhiStore\",\r\n            whitelist: [\"config\"], // only counter will be persisted, add other reducers if needed\r\n            storage, // if needed, use a safer storage\r\n        };\r\n\r\n        const persistedReducer = persistReducer(persistConfig, combinedReducer); // Create a new reducer with our existing reducer\r\n\r\n        const store = createStore(\r\n            persistedReducer,\r\n            bindMiddleware([thunkMiddleware])\r\n        ); // Creating the store again\r\n\r\n        store.__persistor = persistStore(store); // This creates a persistor object & push that persisted object to .__persistor, so that we can avail the persistability feature\r\n\r\n        return store;\r\n    }\r\n};\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper(makeStore);"]},"metadata":{},"sourceType":"module"}